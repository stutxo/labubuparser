use std::io::Cursor;
use std::path::Path;

use hex::decode;
use image::ImageEncoder;
use image::{ColorType, ImageBuffer, ImageReader, Rgba, codecs::png::PngEncoder};
use palette::{FromColor, Hsl, Srgb};
use rand::distr::Uniform;
use rand::rngs::StdRng;
use rand::{Rng, SeedableRng};

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let genesis_labubu = "89504e470d0a1a0a0000000d494844520000002d0000003b0806000000ef95031c00000f91494441547801edc003a0245996c6f1ff77ee8dc8cca7724b63ae6ddbb66ddbb66ddbb66d698c9e964aaf9e323322eef976b76a7aa6873b6bd5afda362fa288c03692b08d2432937f0d4948c236114166629b171100c1bf92240024619b7fad88004012998924fe1500a8bc08242189dffbbddf034012dbdbdb9452880800329317a6d64a6b8dc73ffef11c1d1dd1751d972e5d223389082471df7df771ead4295e08008217812400321300db48621c476cf3a268ad2189a3a323baae43129228a500609b1701009517421200bff44bbf44d77548222200387bf62cebf59a5ffdd55fc5365dd7d15a032033b99f242282aeeb98a689dddd5d3293d61a9b9b9b00d806e0077ff00779add77a2de6f3398f7ce423793e00a8bc1092b0cd388e0cc3c06c36e37e11c1d6d616e7cf9f07a0b50680249e9b6d7ef4477f94d61a00a5146aadd45ac94c7eeaa77e0a80b77bbbb7c3360099c9f30140e55f2089cc2422a8b52289711c89088661202288085e1049d8c6368bc5825a2b994944300c031141290580cc44122f040095174166228973e7ce514aa1b5c6831ef42024f1b4a73d8dccc4360092786e920068ad71ead429321380bbeeba8b711cb1cd344d4802c0362f0000c1bfc0365dd701309fcf01d8dada4212a5142282d96c862424619b07b20d806d5a6b4cd38424fabee781220249d846122f00009517c23692b00dc0300c4404ebf51a80d61ac330d05ae37e927820490048a294426b8daeeb58afd74cd384245a6b44040092782100085e084900b4d628a510110064265dd72189520a9989246c639be72722c84c363737b14ddff7cc66332282520a11816dfe050004ff02db48629a262282699ac84cc671243329a52009db48e2b9d9e67ea514d6eb3511c16ab562b55a919948629a26006cf3420010fc0b249199f47d4f44504a01a0eb3a4a29b4d698cfe7d8c6369278204900d8263329a5609b5a2b1141ad15db48c2369278210008fe05b69184240e0e0eb04d6b8d61189044ad95e572c90b621b4964260099496602506bc53692b0cd8b0080cabf401200474747440499c962b1a0ef7b6cf3e66ffee60048c236b629a5703f496426eff44eefc4344dcc6633fefaafff9a88601c4700d6eb357ddf534a2133792100a8bc10b69104404470cd35d7304d1311c1bdf7de4bd77548c236f7b3cdfd6c230980d61a00e33872f1e2456c73ecd8316c338e2399496b0d0049bc0000042f02db945258afd7d45a91444420094948e27e9278204948e27eb60198a60980beefc94c6c032009dbbc0000c8b6792e1101c08ffee88fb2b5b5c5f6f636b699a6895a2bb60168ad319bcd58afd7f47d4f66021011d8a6b5462905dbd45ac94c6c330c031b1b1b0cc3402985d61a11c13df7dcc36c3603e02ddff22d91446b8d0700207821b6b7b719c791520ab556363737018808004a296426b3d98cd61aad3524516b252228a5601b494cd344669299cc6633d6eb35a5144a2948a2d6cac6c6069949d775bc0000c8b679a68800e0a77ffaa7e9ba8eeded6d6aad4cd304c0f9f3e7e9fb1edb745dc77abda694826d363737e9ba8e711c8908006aad642692d8dfdf67180624318e231b1b1b8ce3484470ecd831005a6bf47d8f24ce9e3d8b6ddeeaadde0adbd80600207800db00f47d0fc06c362333e9ba0edb2c160b6c2389d61a110180242491994404a514003213dbb4d658afd70044047ddf639b88c03692a8b5524a611c47006aaddc4f12cf0440e5f918c7915a2babd50adb1c1c1c609beded6dfabe07a0eb3abaae63b95c329fcfb9e38e3b18c791aeeb18c7915a2b9909806d1ef18847308e23a5146c03300c03d334b1bbbb4b6612116c6e6e2289699a28a5609b88e09900089ee9ecd9b3dcaf94426b8d520ab659ad566426a5142401d0751d00a5145a6b642611014044d05a03c03699496b0d80ccc436994966524a61b55a9199f47d4f6b8d699a88084a2948223379260082675a2e9700d86618062202dbcc6633249199d45a01c84c6cb35aad28a5002009dbac562b6aad945218c791520a929044ad95711c9104806d5a6b945298cd668ce3886d24d15a639a266c0310114842129264dbfcfaafff3ae33892991c3f7e9cf57acd6ab502e0e4c993945298cd6664269228a5609bccc436ebf59a520ad3341111dcafd6ca344d9c387182e57289245a6bd45a91846df6f6f6e8ba8ec3c3430e0e0ea8b5b2b5b545298573e7ce514ae1cddeeccd00000800498ce38824220280c56201c0344dcc66334a29f47d4f44d0f73dad3524514aa1eb3a6c639bcc4412998924c671a494c2300cd82633e9ba8e699ac84cbaaea39402402985520aad355a6b945228a5f00000549ea994c2300c44045dd7318e23ad356aadcce7735a6b0cc380241ef398c7200980bffaabbfa2eb3a363636880866b3195dd7310c03b3d98c711c89086c536be5c55ffcc5b9dfdffffddf338e239b9b9b009c3f7f1e4948a2d6ca388ed8461200b69144f04cd33401609b611800e8ba0e49d806a09442290549dcafef7ba66902609a26006c534ae1e8e888520ad334d15ac336927820db4cd3846d6c338e23e33892990cc3806dee270980ca3345049218c791cca494c2344dd45ac94c3293fdfd7d006c2309db3ce6318f01e06ffee66f0028a570f1e2455a6bd45a99cd6648e2255ee22500c84c2401b0bfbf8f24e6f33999c96c366318066aadd45a910440ad15db48c23601609b520ad334514a012022a8b5d25a03a0d64ad775745d872424f1fc4404a514baae032033b1cdfd24012089520ab619c711dbacd76b002491999452a8b5328e2300b69144b58d248661a0944244504a212268ad91994404d334d15a6363638388203391c4fd4a29d8a694c27abda6eb3a3293699a782049642600b601e8fb9e520a7ddf631b49b4d628a5304d13ad35240120892a09808820220090c4300c48a294c2c58b1769ad71f2e44924619be7b65c2e0128a5f08c673c83cc242278d4a31ec5039552b00dc0e6e626ad352e5ebc88246cd35a232290c4388ed45aa9b5621b49d826006c339bcd383a3a223301908424ee576ba5eb3aa669e2f9b18d6da669621c476c03504a2122b8df344ddccf3692e8ba8e5a2bd334516ba594822424314d13b6910400400590c4388ef47d0f40ad95d61aad354a299c3a758af57acdc1c1019b9b9bfceddffe2d87878748e2c94f7e32d334319fcf8908fabee7655ee665b04d6b8d8d8d0d3293bffffbbf07e08ffff88f9104806d6cb3582ce8ba8e4b972ed15a639a26b6b6b60028a5609b670220782eb669ad611b4900acd76b00baae631c47002401b05aad9004c0344d6426b6918424a66902c036b68908004a29d84612118124baaea3eb3a6aadb4d6e8ba8e88c03600b601d0f9f3e76d9b6baeb986cc04e0677ff66719c7919b6eba098073e7ce1111dc78e38d48223379c9977c4900feeeeffe0e49ececec00d05a6318065a6b44048f7ef4a301f8fbbfff7b4a293ce6318fe17e8f7ffce319c7917beeb987d61a11c1cece0ef3f99cdb6ebb8d699a78877778070024919948a29e3c791200db4842125dd7d1f73dc330d0f73d99c9388e48024012f79344d775dc72cb2ddcef718f7b1c998924ee97993cb7cca494c2344d006426b6393a3a62737393611800b04d66020050792e99496b8d88a0ef7bc671a4eb3a242189711ca9b5f240ad359e9b6d5a6bdcaf944244f04099896d4a296426b5566c2389cca4b50680249e0900d936cf252200f8c55ffc45004e9e3cc9388eeceeee524ac1369989246eb9e516006aad0cc34029858820339184248661a0d64a4470ebadb7629b520aad354a296c6d6d319bcdb8efbefb88084a29bcd11bbd110099c90300507921a669a2b5c66ab5223329a59099945228a5b05aadc84cbaae639a2666b319d334314d13a5146cd35aa3d64a66328e23ad356aad4cd3846d002282699ab85f66f2020020dbe60588081ee8777ee777b85fdff7d8e6befbeea394422985ccc4367ddfb35eaf89086aad006426ad358e1f3f0e8024c671a494c26bbee66b723fdb482233793e00a8bc10b691c40349222258afd7d806401299492985d61ae338d2751d9258ad5694520068ad611b4900d45a91c473b3cd0b0040e5f928a5609b5ffcc55f04a0b54644f05aaff55adcef0ffff00fc94caebdf65a5a6b6426ad35e6f339cbe592aeeba8b5b2bdbd4d6b8d5a2babd58a884012a5145ef9955f1949fcc22ffc029258afd7d45ab14d442089d61a0f0040f0424404d334619b6118b00d80240024310c03b699cd66cc663332935a2b99c9388e004404b6d9d8d840129218c71100db8ce3886d228288a0d60a806d9e0b00b26d80beef99a60949fceccffe2c5dd7b1bdbdcdd1d111affffaaf8f247efbb77f9baeebb04d66d25a63369b01b05aad98cd666426b556d6eb35920028a500504a012022383a3a02a0eb3a5eedd55e0d4900fce11ffe217ddf73df7df7310c036ffdd66f8d6d6c03005079a6699a00c84c6aad4cd3846de6f339920098cd666426b629a5601b498ce3c8c6c60600a51400e6f339cf6d1c4724318e237ddf2309db48e27ead3556ab1592582c160048e29900a83c93246c2309db00bcfaabbf3a00bff00bbf40ad95e57249dff764261181246c1311bc2824919948421299496b8d9ff9999fa194c2b973e7788dd7780d6cf38bbff88bb4d6782e0004cf649bfb4dd344290500db4404d334b1b9b90940ad95d61a9298a6895a2b2f0a494404b6c94c6c536ba59482241ea894422905db3c0000c1f3516b659a26ee374d1300d334318e23ad356cd35a232268adf1a2188601dbb4d628a500609bd61a99896deed75a03401211c13301507926dbdcef4ddee44d00908424baaec336e338526b451292c84c5a6bd45a7951745d47449099642611c16ab5421211c1300cdcef4ddff44db95f6b8d67022078118ce388242282ccc436ad353293520aad355e1411c1344d9452c84c0066b319a5146cd3751dff02008267b28d6d6c631bdb00d8a6d64a6b8d520ab6e9fb9e520a7ddf639b17d5388e4cd344290549b4d6c84c5a6b48a294826d2202dbd8c636b67926002a2f846d24011011d84612e338629bcc2433e9ba8ed61a00aff66aafc603fdc99ffc09c330300c03a5146aad8ce3482985d96cc672b9a4d64a6b8dcc44122f0400c10b210980d61a99c96ab5222268ad2189d61a9298a60980699ab0cdfd6c330c03ad3536363628a5909948223359ad56cce7735a6bf47d4f6602609b170000d936ff828800e0777ee7778808002282d61a9989245efbb55f1bdbd8e6e77ffee789082282377ee3374612bff33bbf0380245a6b745d872424f1aaaffaaa0048a2b5c60b0140f0afd0751dad35a669a2b546442089beefc94c0024d1751d0092b85fad95aeeba8b502609b5a2be338723fdbfc0b00a8fc2beceeee524ae1e0e080beef29a5f0266ff22648c236cf8f6d002202809ff9999f212268ad319bcd782049fc0b00085e04b601188681d61af3f91cdb642692b0cd8b2a22b04dad95cc641c476c03609b7f0100b26dfe0592f897d8e68591c4bfc436ff0200fe11f19f0949994fa6f70000000049454e44ae426082000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    let png_bytes = decode(genesis_labubu.trim()).expect("hex decode failed");

    let rng_seed: Option<u64> = None;

    let img = ImageReader::new(Cursor::new(png_bytes))
        .with_guessed_format()
        .expect("cursor I/O failed")
        .decode()
        .expect("PNG decode failed")
        .to_rgba8();

    let mut rng: StdRng = rng_seed
        .map(StdRng::seed_from_u64)
        .unwrap_or_else(|| StdRng::from_seed(rand::random()));
    let new_hue: f32 = rng.sample(Uniform::new(0.0, 360.0).unwrap());

    let (out_w, out_h) = img.dimensions();
    let mut out: ImageBuffer<Rgba<u8>, Vec<u8>> = ImageBuffer::new(out_w, out_h);
    for y in 0..out_h {
        for x in 0..out_w {
            let p = img.get_pixel(x, y);
            let a = p[3];
            if a == 0 {
                out.put_pixel(x, y, Rgba([0, 0, 0, 0]));
                continue;
            }
            let rgb = Srgb::new(
                p[0] as f32 / 255.0,
                p[1] as f32 / 255.0,
                p[2] as f32 / 255.0,
            );
            let hsl: Hsl = Hsl::from_color(rgb);
            let min_sat = 0.6;
            let sat = if hsl.saturation < 0.05 {
                min_sat
            } else {
                hsl.saturation
            };
            let recol_f32 = Srgb::from_color(Hsl::new(
                palette::RgbHue::from_degrees(new_hue),
                sat,
                hsl.lightness,
            ));
            let mut recol_u8 = recol_f32.into_format::<u8>();
            // Preserve white teeth
            if p[0] > 240 && p[1] > 240 && p[2] > 240 {
                recol_u8.red = 255;
                recol_u8.green = 255;
                recol_u8.blue = 255;
            }

            out.put_pixel(x, y, Rgba([recol_u8.red, recol_u8.green, recol_u8.blue, a]));
        }
    }

    let out_path = Path::new("control_block_labubu.png");
    let file = std::fs::File::create(&out_path)?;
    let encoder = PngEncoder::new(file);
    encoder.write_image(&out.as_raw(), out_w, out_h, ColorType::Rgba8.into())?;
    Ok(())
}
